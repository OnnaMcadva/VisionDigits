import torch
import os
from .simple_cnn import SimpleCNN


class ModelWrapper:
    """
    –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ—Å–æ–≤.
    """
    def __init__(self, path: str, num_classes: int = 10):
        self.device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
        self.model = SimpleCNN(num_classes=num_classes).to(self.device)
        self.labels = [str(i) for i in range(num_classes)]
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≤–µ—Å–æ–≤ –º–æ–¥–µ–ª–∏
        try:
            if not os.path.exists(path):
                raise FileNotFoundError(f"–§–∞–π–ª –º–æ–¥–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω: {path}")
            
            self.model.load_state_dict(torch.load(path, map_location=self.device))
            self.model.eval()
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ {path}")
            
        except FileNotFoundError as e:
            print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
            print("üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python app/train.py' –¥–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏")
            raise
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –º–æ–¥–µ–ª–∏: {e}")
            raise

    def predict(self, image_tensor):
        """
        –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ –∫–ª–∞—Å—Å–∞ –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è.
        
        Args:
            image_tensor: –¢–µ–Ω–∑–æ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ä–∞–∑–º–µ—Ä–æ–º (1, 28, 28)
            
        Returns:
            str: –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å (—Ü–∏—Ñ—Ä–∞)
        """
        image_tensor = image_tensor.unsqueeze(0).to(self.device)  # (1,1,28,28)
        with torch.no_grad():
            outputs = self.model(image_tensor)
            _, predicted = torch.max(outputs, 1)
        return self.labels[predicted.item()]
